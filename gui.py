# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import numpy as np
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import sympy as sp
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label, Frame
import matplotlib.pyplot as plt
from calculations import calculate_derivative, calculate_integral, evaluate_function


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\Rhenel Jhon Sajol\Documents\CalcMate\CalcMate\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1280x720")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 720,
    width = 1280,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    640.0,
    40.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    640.0,
    46.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    640.0,
    400.0,
    image=image_image_3
)

canvas.create_rectangle(
    639.0,
    79.0,
    640.0,
    720.00002288818,
    fill="#FFFFFF",
    outline="")

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    327.0,
    191.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    311.0,
    378.0,
    image=image_image_5
)


image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    311.0,
    588.0,
    image=image_image_6
)

#for fucntion input
entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    263.0,
    358.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=72.0,
    y=340.0,
    width=382.0,
    height=39.0
)

#for upper limit input
entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    105.0,
    435.0,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#FFF7F7",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=67.0,
    y=423.0,
    width=76.0,
    height=24.0
)

#For Diffrentation output
image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    290.0,
    552.0,
    image=image_image_7
)

#for lower limit input
entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    226.0,
    435.0,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#FFF7F7",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=188.0,
    y=423.0,
    width=76.0,
    height=24.0
)

#for solve differentiation and integration button
button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = canvas.create_image(
    525.5,  # x + width/2
    359.0,  # y + height/2
    image=button_image_1
)
canvas.tag_bind(button_1, '<Enter>', lambda e: canvas.config(cursor='hand2'))
canvas.tag_bind(button_1, '<Leave>', lambda e: canvas.config(cursor=''))
canvas.tag_bind(button_1, '<Button-1>', lambda e: (canvas.move(button_1, 1, 1), update_graphs()))
canvas.tag_bind(button_1, '<ButtonRelease-1>', lambda e: canvas.move(button_1, -1, -1))


#for Integration Output
image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    290.0,
    643.0,
    image=image_image_8
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    958.0,
    401.0,
    image=image_image_9
)


#for original Function graph
image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    959.0,
    230.0,
    image=image_image_10
)


#for numerical differentiation graph
image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    959.0,
    593.0,
    image=image_image_11
)


#for numerical integration graph
image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    959.0,
    412.0,
    image=image_image_12
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = canvas.create_image(
    1111.43,  # x + width/2
    144,  # y + height/2
    image=button_image_2
)
canvas.tag_bind(button_2, '<Enter>', lambda e: canvas.config(cursor='hand2'))
canvas.tag_bind(button_2, '<Leave>', lambda e: canvas.config(cursor=''))
canvas.tag_bind(button_2, '<Button-1>', lambda e: (canvas.move(button_2, 1, 1), print("button_2 clicked")))
canvas.tag_bind(button_2, '<ButtonRelease-1>', lambda e: canvas.move(button_2, -1, -1))

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = canvas.create_image(
    1111.43,  # x + width/2
    325,  # y + height/2
    image=button_image_3
)
canvas.tag_bind(button_3, '<Enter>', lambda e: canvas.config(cursor='hand2'))
canvas.tag_bind(button_3, '<Leave>', lambda e: canvas.config(cursor=''))
canvas.tag_bind(button_3, '<Button-1>', lambda e: (canvas.move(button_3, 1, 1), print("button_3 clicked")))
canvas.tag_bind(button_3, '<ButtonRelease-1>', lambda e: canvas.move(button_3, -1, -1))

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = canvas.create_image(
    1111.43,  # x + width/2
    506,  # y + height/2
    image=button_image_4
)
canvas.tag_bind(button_4, '<Enter>', lambda e: canvas.config(cursor='hand2'))
canvas.tag_bind(button_4, '<Leave>', lambda e: canvas.config(cursor=''))
canvas.tag_bind(button_4, '<Button-1>', lambda e: (canvas.move(button_4, 1, 1), print("button_4 clicked")))
canvas.tag_bind(button_4, '<ButtonRelease-1>', lambda e: canvas.move(button_4, -1, -1))



#Original Function
image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    769.0,
    140.0,
    image=image_image_13
)

#Numerical Function
image_image_14 = PhotoImage(
    file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(
    794.0,
    319.0,
    image=image_image_14
)


#Numerical Integration
image_image_15 = PhotoImage(
    file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(
    794.0,
    501.0,
    image=image_image_15
)

image_image_16 = PhotoImage(
    file=relative_to_assets("image_16.png"))
image_16 = canvas.create_image(
    175.0,
    323.0,
    image=image_image_16
)

image_image_17 = PhotoImage(
    file=relative_to_assets("image_17.png"))
image_17 = canvas.create_image(
    82.0,
    401.0,
    image=image_image_17
)

image_image_18 = PhotoImage(
    file=relative_to_assets("image_18.png"))
image_18 = canvas.create_image(
    189.0,
    402.0,
    image=image_image_18
)

image_image_19 = PhotoImage(
    file=relative_to_assets("image_19.png"))
image_19 = canvas.create_image(
    124.0,
    508.0,
    image=image_image_19
)

image_image_20 = PhotoImage(
    file=relative_to_assets("image_20.png"))
image_20 = canvas.create_image(
    113.0,
    592.0,
    image=image_image_20
)

# Create labels for results
diff_result_label = Label(
    window,
    text="",
    bg="#FFFFFF",
    fg="#000716",
    font=('Arial', 12),
    wraplength=380,
    justify="left"
)
diff_result_label.place(x=72, y=535, width=382, height=39)

integ_result_label = Label(
    window,
    text="",
    bg="#FFFFFF",
    fg="#000716",
    font=('Arial', 12),
    wraplength=380,
    justify="left"
)
integ_result_label.place(x=72, y=625, width=382, height=39)

window.resizable(False, False)

def plot_function(canvas_widget, function_str, x_range, title, pos_x, pos_y, width=380, height=140):
    try:
        # Create figure with correct aspect ratio for rectangular shape
        fig = Figure(figsize=(width/80, height/80), dpi=100)
        fig.patch.set_facecolor('#F0F0F0')  # Light gray background
        ax = fig.add_subplot(111)
        ax.set_facecolor('#FFFFFF')  # White plot background
        
        x_vals = np.linspace(x_range[0], x_range[1], 1000)
        y_vals = evaluate_function(function_str, x_vals)
        
        if y_vals is not None:
            # Ensure y_vals is a numpy array with correct shape
            y_vals = np.asarray(y_vals)
            if y_vals.ndim == 0:  # scalar result
                y_vals = np.full_like(x_vals, float(y_vals))
            elif y_vals.shape != x_vals.shape:
                print(f"Shape mismatch: x={x_vals.shape}, y={y_vals.shape}")
                return None
                
            # Plot with improved styling
            ax.plot(x_vals, y_vals, color='#2E86C1', linewidth=2.5, 
                   linestyle='-', label='Function')
            
            # Add subtle grid with custom styling
            ax.grid(True, linestyle='--', alpha=0.3, color='#808080')
            
            # Customize axes
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            ax.spines['bottom'].set_color('#404040')
            ax.spines['left'].set_color('#404040')
            
            # Adjust tick label sizes and colors
            ax.tick_params(axis='both', which='major', labelsize=8, 
                         colors='#404040', length=5, width=1)
            
            # Add minimal padding to y-axis limits
            y_min, y_max = ax.get_ylim()
            y_padding = (y_max - y_min) * 0.1
            ax.set_ylim(y_min - y_padding, y_max + y_padding)
            
            # Set aspect ratio to 'auto' for rectangular shape
            ax.set_aspect('auto')
            
            # Add subtle shading under the curve
            ax.fill_between(x_vals, y_vals, alpha=0.1, color='#2E86C1')
            
            # Tighter layout with minimal padding
            fig.tight_layout(pad=1.0)
            
            # Create new canvas widget
            canvas_widget = FigureCanvasTkAgg(fig, master=window)
            canvas_widget.draw()
            widget = canvas_widget.get_tk_widget()
            widget.place(x=pos_x, y=pos_y, width=width, height=height)
            
            # Lower the graph widget below all canvas items
            for item in canvas.find_all():
                widget.lower(item)
            
            return canvas_widget
    except Exception as e:
        print(f"Error plotting {title}: {e}")
    return None

def update_graphs():
    try:
        # Store all canvas items before calculations
        canvas_items = canvas.find_all()
        
        # Get input values
        func_str = entry_1.get().strip()
        if not func_str:
            diff_result_label.config(text="Please enter a function")
            integ_result_label.config(text="Please enter a function")
            return

        try:
            lower = float(entry_3.get() or "0")  # Default to 0 if empty
            upper = float(entry_2.get() or "1")  # Default to 1 if empty
        except ValueError:
            diff_result_label.config(text="Please enter valid numbers for limits")
            integ_result_label.config(text="Please enter valid numbers for limits")
            return
        
        # Calculate derivative and integral
        x_vals = np.linspace(lower, upper, 1000)
        derivative_vals, derivative_str = calculate_derivative(func_str, x_vals)
        
        if derivative_vals is None:
            diff_result_label.config(text="Invalid function for derivative")
            integ_result_label.config(text="Invalid function for integral")
            return
            
        integral_func, definite_integral, integral_str = calculate_integral(func_str, lower, upper)
        
        if integral_func is None:
            integ_result_label.config(text="Invalid function for integral")
            return

        # Update result labels with clearer formatting
        diff_result_label.config(text=derivative_str)
        integral_result = f"{definite_integral:.2f}"
        integ_result_label.config(text=integral_result)
        
        # Plot graphs with correct titles matching their content
        original_plot = plot_function(window, func_str, [lower, upper], "Original Function", 770, 160, width=380, height=140)
        if original_plot:
            derivative_plot = plot_function(window, derivative_str, [lower, upper], "Derivative", 770, 342, width=380, height=140)
            if derivative_plot:
                integral_plot = plot_function(window, integral_str, [lower, upper], "Integral", 770, 523, width=380, height=140)
        
        # Ensure entry fields and labels stay visible
        entry_1.lift()
        entry_2.lift()
        entry_3.lift()
        diff_result_label.lift()
        integ_result_label.lift()
        
    except Exception as e:
        print(f"Error in update_graphs: {e}")
        diff_result_label.config(text="Please check your input")
        integ_result_label.config(text="Please check your input")

def save_graph(graph_num):
    try:
        if graph_num == 1:
            title = "Original Function"
            y_start = 160
        elif graph_num == 2:
            title = "Derivative"
            y_start = 342
        else:
            title = "Integral"
            y_start = 523
            
        for widget in window.winfo_children():
            if isinstance(widget, FigureCanvasTkAgg().get_tk_widget().__class__):
                if abs(widget.winfo_y() - y_start) < 20:  # Increased tolerance
                    canvas_obj = widget.master
                    if isinstance(canvas_obj, FigureCanvasTkAgg):
                        canvas_obj.figure.savefig(f"{title.lower().replace(' ', '_')}.png", bbox_inches='tight', dpi=300)
                        print(f"Saved {title} graph as {title.lower().replace(' ', '_')}.png")
                        break
    except Exception as e:
        print(f"Error saving graph: {e}")

# Update button bindings
canvas.tag_bind(button_1, '<Button-1>', lambda e: (canvas.move(button_1, 1, 1), update_graphs()))
canvas.tag_bind(button_1, '<ButtonRelease-1>', lambda e: canvas.move(button_1, -1, -1))

canvas.tag_bind(button_2, '<Button-1>', lambda e: (canvas.move(button_2, 1, 1), save_graph(1)))
canvas.tag_bind(button_2, '<ButtonRelease-1>', lambda e: canvas.move(button_2, -1, -1))

canvas.tag_bind(button_3, '<Button-1>', lambda e: (canvas.move(button_3, 1, 1), save_graph(2)))
canvas.tag_bind(button_3, '<ButtonRelease-1>', lambda e: canvas.move(button_3, -1, -1))

canvas.tag_bind(button_4, '<Button-1>', lambda e: (canvas.move(button_4, 1, 1), save_graph(3)))
canvas.tag_bind(button_4, '<ButtonRelease-1>', lambda e: canvas.move(button_4, -1, -1))

window.mainloop()
